#!/bin/sh

export POSIXLY_CORRECT=yes
export LC_NUMERIC=en_US.UTF-8

print_help()
{
    echo "========================================================================"
    echo "Help MANUAL for XTF script"
    echo "========================================================================"
    echo "------------------------------------------------------------------------"
    echo "COMMANDS for XTF:"
    echo "                                                                        "
    echo "  list [USER_NAME] : lists all log lines containing USER_NAME           "
    echo "  list-currency [USER_NAME] : lists all sorted currencies in logs       "
    echo "  status [USER_NAME] : display status of all currencies for USER        "
    echo "  profit [USER_NAME] : display status of all currencies with            "
    echo "                       added profit for USER                            "
    echo "                                                                        "
    echo "FILTERS for XTF:                                                        "
    echo "                                                                        "
    echo "  -a [DATE_TIME] : in combination with one of previous commands         "
    echo "                   displays logs AFTER given DATE_TIME                  "
    echo "  -b [DATE_TIME] : in combination with one of previous commands         "
    echo "                   displays logs BEFORE given DATE_TIME                 "
    echo "  -c [CURRENCY] : in combination with one of previous commands          "
    echo "                  displays logs FOR selected CURRENCY                   "
    echo "                                                                        "
    echo "  (when no COMMAND is used for FILTERs LIST command is used automaticly)"
    echo "------------------------------------------------------------------------"
}

validate_string() {
    # Check if the input is a non-empty string
    [ -n "$1" ]
}

# Function to validate a date
validate_date() {
    # Use date command to check if the input can be parsed as a date
    date -d "$1" >/dev/null 2>&1
}

# Function to validate a number
validate_number() {
    # Check if the input is a valid number
    case $1 in
        ''|*[!0-9.]*)
            return 1
            ;;
        *)
            return 0
            ;;
    esac
}

LOG_FILES=""
COMPRIMATED_LOG_FILES=""

LISTING_COMMAND=""
STATUS_COMMAND=""
PROFIT_COMMAND=""

CURRENCY=""

FILTER=""

HELP=""
DATE_TIME=""

USER_NAME=""

XTF_PROFIT=""

ERROR="test"


while [ "$#" -gt 0 ]; do
    case "$1" in
    
    list | list-currency)
        LISTING_COMMAND="$1"
        shift
    ;;

    status)
        STATUS_COMMAND="$1"
        shift
    ;;

    profit)
        PROFIT_COMMAND="$1"
        shift
    ;;

    -a)
        FILTER="$1"
        shift
        DATE_TIME="$1"
        shift
    ;;
    
    -b)
        FILTER="$1"
        shift
        DATE_TIME="$1"
        shift
    ;;
    
    -c)
        FILTER="$1"
        shift
        CURRENCY="$1"
        shift
    ;;
    
    -h)
        HELP="$1"
        shift
    ;;
    
    --help)
        HELP="$1"
        shift
    ;;

    *.gz)
        COMPRIMATED_LOG_FILES="$1"
        shift
    ;;

    *)
        if [ -n "$1" ] && [ -f "$1" ]; then  
            LOG_FILES="$1"
            shift
        else
            USER_NAME="$1"
            shift
        fi
    ;;

    esac
done


if [ "$HELP" = "-h" ] || [ "$HELP" = "--help" ]; then
    print_help
    exit 0
fi

if [ -n "$COMPRIMATED_LOG_FILES" ]; then
    READ_INPUT=$(gzip -d -c "$COMPRIMATED_LOG_FILES" | sort)
fi

if [ -z "$LOG_FILES" ] && [ -z "$READ_INPUT" ]; then
    echo "Incorrect input, use -h or --help to display manual"
    exit 0
fi

if [ -n "$LOG_FILES" ]; then
    #READ_INPUT="${READ_INPUT}$(cat "$LOG_FILES")"
    READ_INPUT="${READ_INPUT} $(printf '\n' && cat "$LOG_FILES")"
fi

if [ -n "$READ_INPUT" ]; then
    echo "$READ_INPUT" | awk -F';' '{
    name=$1; date_val=$2; curr=$3; value=$4;
    
    if(NR == 1){
        next;
    }

    if (system("date -d \"" date_val "\" > /dev/null 2>&1") == 0) {
    }
    else {
        print "File Error: Invalid date";
        exit 1;
    }
    if (length(name) > 0) {
    }
    else {
        print "File Error: Invalid name";
        exit 1;
    }
    if (length(curr) > 0) {
    }
    else {
        print "File Error: Invalid currency";
        exit 1;
    }
    if (value ~ /^-?[0-9]+(\.[0-9]+)?$/) {}
    else {
        print "File Error: Invalid number";
        exit 1;
    }
    }'
    ERROR="$?"
    if [ "$ERROR" -ne 0 ]; then
        exit "$ERROR"
    fi
fi

if [ "$LISTING_COMMAND" = "list" ]; then

    case "$FILTER" in

    -a)
        echo "$READ_INPUT" | awk -F ';' -v date="$DATE_TIME" '$2 >= date {print $0}' | grep "$USER_NAME"
        exit 0
        ;;

    -b)
        echo "$READ_INPUT" | awk -F ';' -v date="$DATE_TIME" '$2 <= date {print $0}' | grep "$USER_NAME"
        exit 0
        ;;

    -c)
        echo "$READ_INPUT" | grep "$CURRENCY" | grep "$USER_NAME"
        exit 0
        ;;

    *)
        echo "$READ_INPUT" | grep "$USER_NAME"
        exit 0
        ;;
    esac

fi

if [ "$LISTING_COMMAND" = "list-currency" ]; then

    case "$FILTER" in

    *)
        echo "$READ_INPUT" | grep "$USER_NAME" | awk -F ';' '{print $3}' | sort | uniq
        exit 0
    ;;
    esac
fi

if [ "$STATUS_COMMAND" = "status" ]; then

    case "$FILTER" in

    -a)
        echo "$READ_INPUT" | grep "$USER_NAME" | awk -F ';' -v date="$DATE_TIME" '
        $2 >= date { 
            my_dict[$3] += $4 
        } 
        END { 
            for (key in my_dict) 
            { 
                printf "%s : %.4f\n", key, my_dict[key]
            }
        }'
        exit 0
    ;;

    -b)
        echo "$READ_INPUT" | grep "$USER_NAME" | awk -F ';' -v date="$DATE_TIME" '
        $2 <= date { 
            my_dict[$3] += $4 
        } 
        END { 
            for (key in my_dict) 
            { 
                printf "%s : %.4f\n", key, my_dict[key]
            }
        }'
        exit 0
    ;;

    -c)
        echo "$READ_INPUT" | grep "$USER_NAME" | awk -F ';' -v curr="$CURRENCY" '
        $3 = curr { 
            my_dict[$3] += $4 
        } 
        END { 
            for (key in my_dict) 
            { 
                printf "%s : %.4f\n", key, my_dict[key]
            }
        }'
        exit 0
    ;;

    *)
        echo "$READ_INPUT" | grep "$USER_NAME" | awk -F ';' '
        { 
            my_dict[$3] += $4 
        } 
        END { 
            for (key in my_dict) 
            { 
                printf "%s : %.4f\n", key, my_dict[key]
            }
        }' "$LOG_FILES"
        exit 0
    ;;
    esac
fi

if [ "$PROFIT_COMMAND" = "profit" ]; then

    case "$FILTER" in

    -a)
        echo "$READ_INPUT" | grep "$USER_NAME" | awk -F ';' -v xtf_profit="${XTF_PROFIT:-1.20}" -v date="$DATE_TIME" '
        $2 >= date { 
            my_dict[$3] += $4 
        } 
        END { 
            for (key in my_dict) 
            { 
                if (my_dict[key] > 0)
                {
                    my_dict[key] *= xtf_profit;
                }
                printf "%s : %.4f\n", key, my_dict[key]
            }
        }'
        exit 0
    ;;

    -b)
        echo "$READ_INPUT" | grep "$USER_NAME" | awk -F ';' -v xtf_profit="${XTF_PROFIT:-1.20}" -v date="$DATE_TIME" '
        $2 <= date { 
            my_dict[$3] += $4 
        } 
        END { 
            for (key in my_dict) 
            { 
                if (my_dict[key] > 0) 
                {
                    my_dict[key] *= xtf_profit;
                }
                printf "%s : %.4f\n", key, my_dict[key]
            }
        }'
        exit 0
    ;;

    -c)
        echo "$READ_INPUT" | grep "$USER_NAME" | awk -F ';' -v xtf_profit="${XTF_PROFIT:-1.20}" -v curr="$CURRENCY" '
        $3 == curr { 
            my_dict[$3] += $4 
        } 
        END { 
            for (key in my_dict) 
            { 
                if (my_dict[key] > 0) 
                {
                    my_dict[key] *= xtf_profit;
                }
                printf "%s : %.4f\n", key, my_dict[key]
            }
        }'
        exit 0
    ;;

    *)
        echo "$READ_INPUT" | grep "$USER_NAME" | awk -F ';' -v xtf_profit="${XTF_PROFIT:-1.20}" '
        { 
            my_dict[$3] += $4 
        } 
        END { 
            for (key in my_dict) 
            { 
                if (my_dict[key] > 0) 
                {
                    my_dict[key] *= xtf_profit;
                }
                printf "%s : %.4f\n", key, my_dict[key]
            }
        }'
        exit 0
    ;;
    esac
fi

if [ -n "$FILTER" ]; then

    case "$FILTER" in

    -a)
        echo "$READ_INPUT" | grep "$USER_NAME" | awk -F ';' -v date="$DATE_TIME" '$2 >= date {printf "%s\n", $0}'
        exit 0
    ;;

    -b)
        echo "$READ_INPUT" | grep "$USER_NAME" | awk -F ';' -v date="$DATE_TIME" '$2 <= date {printf "%s\n", $0}'
        exit 0
    ;;

    -c)
        echo "$READ_INPUT" | grep "$USER_NAME" | grep "$CURRENCY"
        exit 0
    ;;
    esac
fi

if [ -z "$HELP" ] && [ -z "$PROFIT_COMMAND" ] && [ -z "$STATUS_COMMAND" ] && [ -z "$LISTING_COMMAND" ]; then
    
    if [ -z "$USER_NAME" ]; then
        echo "Use -h or --help to display MANUAL for XTF"
        exit 0
    else
        echo "$READ_INPUT" | grep "$USER_NAME"
        exit 0
    fi
fi
Â¨
