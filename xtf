#!/bin/sh

export POSIXLY_CORRECT=yes
export LC_NUMERIC=en_US.UTF-8

print_help()
{
    echo "========================================================================"
    echo "Help MANUAL for XTF script"
    echo "========================================================================"
    echo "------------------------------------------------------------------------"
    echo "COMMANDS for XTF:"
    echo "                                                                        "
    echo "  list [USER_NAME] : lists all log lines containing USER_NAME           "
    echo "  list-currency [USER_NAME] : lists all sorted currencies in logs       "
    echo "  status [USER_NAME] : display status of all currencies for USER        "
    echo "  profit [USER_NAME] : display status of all currencies with            "
    echo "                       added profit for USER                            "
    echo "                                                                        "
    echo "FILTERS for XTF:                                                        "
    echo "                                                                        "
    echo "  -a [DATE_TIME] : in combination with one of previous commands         "
    echo "                   displays logs AFTER given DATE_TIME                  "
    echo "  -b [DATE_TIME] : in combination with one of previous commands         "
    echo "                   displays logs BEFORE given DATE_TIME                 "
    echo "  -c [CURRENCY] : in combination with one of previous commands          "
    echo "                  displays logs FOR selected CURRENCY                   "
    echo "                                                                        "
    echo "  (when no COMMAND is used for FILTERs LIST command is used automaticly)"
    echo "------------------------------------------------------------------------"
}

LOG_FILES=""
COMPRIMATED_LOG_FILES=""

LISTING_COMMAND=""
STATUS_COMMAND=""
PROFIT_COMMAND=""

AFTER_TIME=""
BEFORE_TIME=""
CURRENT_CURRENCY=""
CURRENCY=""

FILTER=""

HELP=""
DATE_TIME=""

USER_NAME=""

filtered_file=""


while [ "$#" -gt 0 ]; do
    case "$1" in
    
    list | list-currency)
        LISTING_COMMAND="$1"
        shift
    ;;

    status)
        STATUS_COMMAND="$1"
        shift
    ;;

    profit)
        PROFIT_COMMAND="$1"
        shift
    ;;

    -a)
        AFTER_TIME="$1"
        FILTER="$1"
        shift
        DATE_TIME="$1"
        shift
    ;;
    
    -b)
        BEFORE_TIME="$1"
        FILTER="$1"
        shift
        DATE_TIME="$1"
        shift
    ;;
    
    -c)
        CURRENT_CURRENCY="$1"
        FILTER="$1"
        shift
        CURRENCY="$1"
        shift
    ;;
    
    -h)
        HELP="$1"
        shift
    ;;
    
    --help)
        HELP="$1"
        shift
    ;;

    *.gz)
        COMPRIMATED_LOG_FILES="$1"
        shift
    ;;

    *)
        if [ -n "$1" ] && [ -f "$1" ]; then  
            LOG_FILES="$1"
            shift
        else
            USER_NAME="$1"
            shift
        fi
    ;;

    esac
done


if [ -z "$HELP" ] && [ -z "$CURRENT_CURRENCY" ] && [ -z "$BEFORE_TIME" ] && [ -z "$AFTER_TIME" ] && [ -z "$PROFIT_COMMAND" ] && [ -z "$STATUS_COMMAND" ] && [ -z "$LISTING_COMMAND" ]; then
    
    if [ -z "$USER_NAME" ]; then
        echo "Error input occured"
    else
        READ_INPUT="cat $LOG_FILES | grep $USER_NAME"
        echo "$READ_INPUT"
    fi
fi



if [ "$LISTING_COMMAND" = "list" ]; then

    case "$FILTER" in

    -a)
        READ_INPUT=$(awk -v date="$DATE_TIME" '$0 > date' $LOG_FILES | grep $USER_NAME)
        echo "$READ_INPUT"
        ;;

    -b)
        READ_INPUT=$(awk -v date="$DATE_TIME" '$0 < date' $LOG_FILES | grep $USER_NAME)
        echo "$READ_INPUT"
        ;;

    -c)
        READ_INPUT=$(cat $LOG_FILES | grep $CURRENCY | grep $USER_NAME)
        echo "$READ_INPUT"
        ;;

    *)
        READ_INPUT=$(cat $LOG_FILES | grep $USER_NAME)
        echo "$READ_INPUT"
        ;;
    esac

fi

if [ "$LISTING_COMMAND" = "list-currency" ]; then

    case "$FILTER" in

    *)
        READ_INPUT=$(cat $LOG_FILES | grep $USER_NAME | awk -F ';' '{print $3}' | uniq)
        echo "$READ_INPUT"
    ;;
    esac
fi

if [ "$STATUS_COMMAND" = "status" ]; then

    case "$FILTER" in

    -a)
        if [ -z "$LOG_FILES" ]; then
            echo "error"
            exit 0
        fi

        filtered_file=$(awk -F ';' -v date="$DATE_TIME" '$2 >= date' "$LOG_FILES" | grep "$USER_NAME")

        echo "$filtered_file" | awk -F ';' -v date="$DATE_TIME" '
        $2 >= date { 
            my_dict[$3] += $4 
        } 
        END { 
            for (key in my_dict) 
            { 
                printf "%s : %.4f\n", key, my_dict[key]
            }
        }' "$LOG_FILES"
    ;;

    -b)
        if [ -z "$LOG_FILES" ]; then
            echo "error"
            exit 0
        fi

        filtered_file=$(awk -F ';' -v date="$DATE_TIME" '$2 >= date' "$LOG_FILES" | grep "$USER_NAME")

        echo "$filtered_file" | awk -F ';' -v date="$DATE_TIME" '
        $2 >= date { 
            my_dict[$3] += $4 
        } 
        END { 
            for (key in my_dict) 
            { 
                printf "%s : %.4f\n", key, my_dict[key]
            }
        }' "$LOG_FILES"

    ;;

    -c)
        if [ -z "$LOG_FILES" ]; then
            echo "error"
            exit 0
        fi

        echo "test"

        filtered_file=$(awk -F ';' -v curr="$CURRENCY" '$3 = curr' "$LOG_FILES" | grep "$USER_NAME")

        echo "$filtered_file" | awk -F ';' -v curr="$CURRENCY" '
        $3 = curr { 
            my_dict[$3] += $4 
        } 
        END { 
            for (key in my_dict) 
            { 
                printf "%s : %.4f\n", key, my_dict[key]
            }
        }' "$LOG_FILES"
    ;;

    *)
        READ_INPUT=$(cat $LOG_FILES | grep $USER_NAME | awk -F ';' '{print $3}' | uniq)
        echo "$READ_INPUT"
    ;;
    esac
fi

if [ "$PROFIT_COMMAND" = "profit" ]; then

    case "$FILTER" in

    -a)
        if [ -z "$LOG_FILES" ]; then
            echo "error"
            exit 0
        fi

        filtered_file=$(awk -F ';' -v date="$DATE_TIME" '$2 >= date' "$LOG_FILES" | grep "$USER_NAME")

        echo "$filtered_file" | awk -F ';' -v date="$DATE_TIME" '
        $2 >= date { 
            my_dict[$3] += $4 
        } 
        END { 
            for (key in my_dict) 
            { 
                if (my_dict[key] > 0) 
                {
                    my_dict[key] *= 1.20;
                }
                printf "%s : %.4f\n", key, my_dict[key]
            }
        }' "$LOG_FILES"
    ;;

    -b)
        if [ -z "$LOG_FILES" ]; then
            echo "error"
            exit 0
        fi

        filtered_file=$(awk -F ';' -v date="$DATE_TIME" '$2 >= date' "$LOG_FILES" | grep "$USER_NAME")

        echo "$filtered_file" | awk -F ';' -v date="$DATE_TIME" '
        $2 >= date { 
            my_dict[$3] += $4 
        } 
        END { 
            for (key in my_dict) 
            { 
                if (my_dict[key] > 0) 
                {
                    my_dict[key] *= 1.20;
                }
                printf "%s : %.4f\n", key, my_dict[key]
            }
        }' "$LOG_FILES"
    ;;

    -c)
        if [ -z "$LOG_FILES" ]; then
            echo "error"
            exit 0
        fi

        echo "test"

        filtered_file=$(awk -F ';' -v curr="$CURRENCY" '$3 = curr' "$LOG_FILES" | grep "$USER_NAME")

        echo "$filtered_file" | awk -F ';' -v curr="$CURRENCY" '
        $3 = curr { 
            my_dict[$3] += $4 
        } 
        END { 
            for (key in my_dict) 
            { 
                if (my_dict[key] > 0) 
                {
                    my_dict[key] *= 1.20;
                }
                printf "%s : %.4f\n", key, my_dict[key]
            }
        }' "$LOG_FILES"
    ;;

    *)
        READ_INPUT=$(cat $LOG_FILES | grep $USER_NAME | awk -F ';' '{print $3}' | uniq)
        echo "$READ_INPUT"
    ;;
    esac
fi



if [ "$HELP" = "-h" ] || [ "$HELP" = "--help" ]; then
    print_help
    exit
fi




READ_INPUT="gzip -d -c $COMPRIMATED_LOG_FILES | cat $LOG_FILES - | sort"

READ_FILTERED="eval $READ_INPUT | awk -F ';' 'if(\$1 > $DATE_TIME &&) {print \$0}'"





